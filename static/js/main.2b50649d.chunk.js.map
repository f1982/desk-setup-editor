{"version":3,"sources":["reportWebVitals.ts","pages/About.tsx","utils/threeUtils.ts","models/DSEObject.tsx","editor/Controllers.tsx","models/Chair.tsx","models/DisplayRoom.tsx","models/MonitorSample.tsx","models/Mug.tsx","models/SimpleDesk.tsx","editor/SetupObjects.tsx","editor/EditScene.ts","editor/SceneElements.tsx","component/ThreeContainer/ThreeComponent.tsx","pages/Editor.tsx","pages/Home.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","About","react_default","a","createElement","className","react_router_dom","to","_callee","scene","name","_yield$import","STLExporter","exporter","stlString","blob","_regeneratorRuntime","wrap","_context","prev","next","sent","parse","binary","Blob","type","saveAs","stop","ObjectCategory","DSEObject","_this","Object","classCallCheck","this","_super","call","objType","None","restrictMin","Vector3","restrictMax","gui","min","max","THREE","GlobalController","camera","renderer","orbit","control","dragControl","dragGroup","Group","dragMoved","rayCaster","rayPointer","Vector2","selectedObj","movableObject","initRayCaster","initOrbit","initDragDrop","OrbitControls","domElement","enablePan","enableDamping","update","addEventListener","render","TransformControls","setMode","event","_this$selectedObj$get","getRestrictArea","position","clamp","enabled","value","add","_this2","Raycaster","rect","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","setFromCamera","selectableElements","objs","children","filter","item","meshes","forEach","element","elementMeshes","Mesh","push","apply","toConsumableArray","subObj","subMeshes","subItem","getMovableMeshes","intersects","intersectObjects","length","object","parent","updateDragObject","_this3","controls","DragControls","transformGroup","_this3$selectedObj$ge","console","log","dragClick","dragObjects","getObjects","Chair","body","mugWidth","chairHeight","loadGLTF","layout","z","geo","BoxGeometry","material","MeshLambertMaterial","color","wireframe","mesh","scale","set","GLTFLoader","load","gltf","xhr","concat","loaded","total","error","DisplayRoom","groundWidth","groundHeight","wallHeight","showWalls","groundColor","wallColor","ground","walls","initGround","initWall","folder","addFolder","onChange","geometry","side","i","wall","rotation","Math","PI","visible","dispatchEvent","message","MonitorSample","loadMonitor","Mug","initMug","SimpleDesk","desktopWidth","desktopDepth","desktopHeight","legWidth","legHeight","padding","boardColor","legsColor","desktop","legs","initDesktop","initLegs","topSurface","child","box","setFromObject","leg","SetupObjects","room","desk","inRoomObjects","onTableObjects","initRoom","initInRoomObjects","initOnDeskObjects","updateInRoomObjectsRestrictArea","setGUI","updateOnTableObjectRestrictArea","chair","_this$room$getContain","getContainerBox","obj","updateRestrictArea","mug","addSub","monitor","_this$desk$getContain","ThreeCanvas","options","composer","clock","perspectiveCamera","orthographicCamera","stats","setupObjects","movableObjects","initScene","initTools","initElements","initControl","dispose","destroy","dom","remove","traverse","mountPoint","background","getScene","getCamera","getOrthographicCamera","ambientLight","directionLight","getLights","alpha","antialias","setSize","getRenderer","renderPass","RenderPass","clear","EffectComposer","addPass","appendChild","axesHelper","GUI","Stats","showPanel","getStats","document","append","canvas","clientWidth","clientHeight","needResize","setPixelRatio","window","devicePixelRatio","callback","setAnimationLoop","begin","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","end","ThreeComp","_useState","useState","_useState2","slicedToArray","initialized","setInitialized","canvasRef","useRef","threeSceneRef","useEffect","current","_canvasRef$current","threeScene","threeCanvas","firstChild","removeChild","data-test","ref","onClick","saveSTL","App","ThreeContainer_ThreeComponent","Intro","ReactDOM","createRoot","getElementById","react_router","path","Home","pages_Editor","pages_About"],"mappings":"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","file":"static/js/main.2b50649d.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Link} from 'react-router-dom'\nimport React from 'react'\n\nfunction About() {\n  return (\n    <div className=\"page\">\n      <div className=\"intro\">This is Setup Editor</div>\n      <Link to=\"/\">Home</Link>\n    </div>\n  );\n}\n\nexport default About;\n","\nimport { saveAs } from 'file-saver';\nimport * as THREE from 'three'\nimport DSEObject from '../models/DSEObject';\n\nfunction findType(scene: THREE.Group, type: string, name: string) {\n  return scene.children.find((child) => (child.type === type && child.name === name));\n}\n\n// Use FileSaver.js 'saveAs' function to save the string\nasync function saveSTL(scene: THREE.Object3D, name: string) {\n  const { STLExporter } = await import('three/examples/jsm/exporters/STLExporter');\n  // const { STLExporter } = await import('three-stdlib/exporters/STLExporter');\n  const exporter = new STLExporter();\n  const stlString = exporter.parse(scene, { binary: false });\n\n\n  const blob = new Blob([stlString], { type: 'text/plain' });\n\n  saveAs(blob, name + '.stl');\n}\n\nexport {\n  findType,\n  saveSTL\n}\n","import GUI from 'lil-gui';\nimport * as THREE from 'three'\nimport { Vector3 } from 'three';\n\nexport enum ObjectCategory {\n  Movable = \"Movable\",\n  Static = \"Static\",\n  None = \"\",\n}\n\ntype ObjTypes = '' | 'MovableObject' | 'StaticObject';\n\nclass DSEObject extends THREE.Group {\n\n  public objType: ObjectCategory = ObjectCategory.None;\n\n  protected restrictMin: Vector3 = new Vector3(-2, -2, -2);\n  protected restrictMax: Vector3 = new Vector3(2, 2, 2);\n\n  constructor() {\n    super();\n  }\n\n  public setGUI(gui: GUI) { \n  }\n\n  /**\n   * Update the container size\n   * @param max \n   * @param min \n   */\n  public updateRestrictArea(min: Vector3, max: Vector3) {\n    this.restrictMin = min;\n    this.restrictMax = max;\n  }\n\n  /**\n   * Get the min and max coordinates of the object can move in \n   * It will be override by specific model component\n   * \n   * @returns \n   */\n  public getRestrictArea(): { min: Vector3, max: Vector3 } {\n    return { min: new Vector3(), max: new Vector3() }\n  }\n\n  /**\n   * Get the surface can be used for content object\n   * The moving area\n   * \n   * @returns {min, max}\n   */\n  public getContainerBox () {\n    return { min: new Vector3(), max: new Vector3() }\n  }\n}\n\nexport default DSEObject;","import { Camera, Group, Mesh, MeshLambertMaterial, Object3D, Raycaster, Renderer, Scene, Vector2, Vector3 } from \"three\";\nimport { DragControls, OrbitControls, TransformControls } from \"three-stdlib\";\nimport DSEObject from \"../models/DSEObject\";\n\nexport const addControl = (camera: THREE.Camera, domElement: HTMLElement) => {\n  const controls = new OrbitControls(camera, domElement);\n  controls.target.set(0, 0.5, 0);\n  controls.update();\n  controls.enablePan = false;\n  controls.enableDamping = true;\n  return controls;\n}\n\nexport const addDragAndDrop = (\n  camera: THREE.Camera,\n  domElement: HTMLElement,\n  objects: THREE.Group[]\n) => {\n  // @ts-ignore\n  const controls = new DragControls(objects, camera, domElement);\n  controls.transformGroup = true;\n\n  // add event listener to highlight dragged objects\n  controls.addEventListener('dragstart', (event) => {\n    // event.object.material.emissive.set(0xaaaaaa);\n  });\n\n  controls.addEventListener('drag', (event) => {\n    // This will prevent moving z axis, but will be on 0 line.\n    // change this to your object position of z axis.\n    // const p = event.object.position;\n    // event.object.position.set(p.x, p.y, 0);\n  });\n\n  controls.addEventListener('dragend', (event) => {\n    // event.object.material.emissive.set(0x000000);\n  });\n}\n\n\nfunction getMovableMeshes(scene: THREE.Scene) {\n  const objs = scene.children.filter((item: THREE.Object3D) => {\n    return item instanceof DSEObject && item.name !== 'displayRoom'\n  });\n  const meshes: any[] = [];\n  objs.forEach(element => {\n    const elementMeshes = element.children.filter(item => (item instanceof Mesh));\n    meshes.push(...elementMeshes);\n\n    // get dse object list inside des object\n    const subObjs = element.children.filter(item => (item instanceof DSEObject));\n    // console.log('subObjs', subObjs);\n    subObjs.forEach(subObj => {\n      //meshes inside des\n      const subMeshes = subObj.children.filter(subItem => (subItem instanceof Mesh));\n      // console.log('subMeshes', subMeshes);\n      meshes.push(...subMeshes);\n    })\n  });\n  return meshes;\n}\n\nfunction getDSEObjects(scene: THREE.Scene) {\n  const objs = scene.children.filter((item: THREE.Object3D) => {\n    return item instanceof DSEObject && item.name !== 'displayRoom'\n  });\n  return objs;\n}\n\nclass GlobalController {\n\n  camera;\n  renderer;\n  scene;\n\n  orbit: OrbitControls;\n  control: TransformControls;\n\n  dragControl: DragControls;\n  dragGroup: THREE.Group = new Group();\n  dragMoved = false;\n\n  rayCaster: Raycaster;\n  rayPointer: Vector2 = new Vector2();\n  selectedObj: DSEObject | null = null;\n\n  movableObject: DSEObject;\n\n  constructor(scene: Scene, camera: Camera, renderer: Renderer) {\n    this.camera = camera;\n    this.renderer = renderer;\n    this.scene = scene;\n\n    this.initRayCaster();\n\n    this.initOrbit();\n    // this.initTransformControls();\n\n    this.initDragDrop();\n    //test to drag the desk\n    // this.updateDragObject(getDSEObjects(this.scene)[1] as DSEObject);\n\n\n  };\n\n  // public attachObject(obj: DSEObject) {\n  //   if (this.movableObject) {\n  //     this.control.detach();\n  //   }\n\n  //   this.movableObject = obj;\n  //   this.control.attach(this.movableObject);\n  // }\n\n  initOrbit() {\n    const orbit = new OrbitControls(this.camera, this.renderer.domElement);\n    orbit.enablePan = false;\n    orbit.enableDamping = true;\n    orbit.update();\n\n    orbit.addEventListener('change', this.render);\n    this.orbit = orbit;\n  }\n\n  initTransformControls() {\n    const control = new TransformControls(this.camera, this.renderer.domElement);\n    control.setMode('translate');\n\n    control.addEventListener('change', (event) => {\n      if (this.selectedObj) {\n        const { min, max } = this.selectedObj.getRestrictArea()\n        this.selectedObj.position.clamp(min, max);\n        this.render(event);\n      }\n    });\n\n    control.addEventListener('dragging-changed', (event) => {\n      this.orbit.enabled = !event.value;\n    });\n\n    // this will affect save STL, when trying to save STL, you need to remove this controller from scene\n    this.scene.add(control);\n    this.control = control;\n  }\n\n\n  initRayCaster() {\n    const rayCaster = new Raycaster();\n\n    // when user point down\n    this.renderer.domElement.addEventListener('pointerdown', (event) => {\n\n      // update ray caster pointer\n      const domElement = this.renderer.domElement;\n      const rect = domElement.getBoundingClientRect();\n      this.rayPointer.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      this.rayPointer.y = - (event.clientY - rect.top) / rect.height * 2 + 1;\n      rayCaster.setFromCamera(this.rayPointer, this.camera);\n\n      // get and set the object can be interacted with\n      const selectableElements = getMovableMeshes(this.scene);\n      const intersects = rayCaster.intersectObjects<Object3D>(selectableElements, true);\n\n      if (\n        intersects.length > 0 &&\n        intersects[0].object.parent instanceof DSEObject\n      ) {\n        this.updateDragObject(intersects[0].object.parent);\n\n      } else {\n        // click on blank area, unselect objects\n        this.updateDragObject(null);\n      }\n    });\n\n    this.rayCaster = rayCaster;\n  }\n\n  initDragDrop() {\n    this.scene.add(this.dragGroup);\n\n    const controls = new DragControls([], this.camera, this.renderer.domElement);\n    controls.transformGroup = true;\n\n    // add event listener to highlight dragged objects\n    controls.addEventListener('dragstart', (event) => {\n      this.orbit.enabled = false;\n      // event.object.material.emissive.set(0xaaaaaa);\n    });\n\n    controls.addEventListener('drag', (event) => {\n      this.dragMoved = true;\n      // const obj: THREE.Object3D = event.object;\n      if (this.selectedObj) {\n        // get the restrict area can be moved in\n        const { min, max } = this.selectedObj.getRestrictArea()\n        this.selectedObj.position.clamp(min, max);\n      }\n\n    });\n\n    controls.addEventListener('dragend', (event) => {\n      console.log('dragend');\n      this.orbit.enabled = true;\n      // event.object.material.emissive.set(0x000000);\n\n      // check it's click action or not\n      if (!this.dragMoved) {\n        if (this.selectedObj){\n          this.dragClick(this.selectedObj);\n        }\n      }\n      this.dragMoved = false;\n    });\n    \n    this.dragControl = controls\n  }\n\n  dragClick(item: DSEObject) {\n    console.log('dragClick', item);\n\n  }\n\n  updateDragObject(item: DSEObject | null) {\n    this.selectedObj = item;\n    const dragObjects = this.dragControl.getObjects();\n    dragObjects.length = 0\n    if (this.selectedObj) {\n      dragObjects.push(this.selectedObj);\n    }\n  }\n\n  render(event: any) {\n    // console.log('event', event);\n  }\n}\n\nexport default GlobalController;\n\n","import { BoxGeometry, Mesh, MeshLambertMaterial, Vector3 } from 'three';\nimport { GLTF, GLTFLoader } from 'three-stdlib';\nimport DSEObject from './DSEObject';\n\nclass Chair extends DSEObject {\n\n  body: Mesh;\n\n  mugWidth = 0.4\n  chairHeight = 0.6;\n\n  constructor() {\n    super();\n\n    this.loadGLTF()\n    this.layout();\n  }\n\n  /**\n   * Get restrict min and max, will be used for object.position.clamp\n   *  \n   * @returns {min:Vector3, max: Vector3}\n   */\n  public getRestrictArea() {\n    return {\n      min: new Vector3(\n        this.restrictMin.x + this.mugWidth / 2,\n        0,\n        this.restrictMin.z + this.mugWidth / 2,\n      ),\n      max: new Vector3(\n        this.restrictMax.x - this.mugWidth / 2,\n        0,\n        this.restrictMax.z - this.mugWidth / 2,\n      )\n    }\n  }\n\n  private loadGLTF() {\n\n    const geo = new BoxGeometry(1, 1, 1);\n    const material = new MeshLambertMaterial({ color: 0xff0000, wireframe: true });\n    const mesh = new Mesh(geo, material);\n    mesh.scale.set(1.2, 0.45, 0.1);\n\n    this.add(mesh);\n\n    const url = process.env.PUBLIC_URL + '/static/models/chair.gltf';\n\n    // Instantiate a loader\n    const loader = new GLTFLoader();\n    // Load a glTF resource\n    loader.load(\n      // resource URL\n      url,\n      // called when the resource is loaded\n      (gltf: GLTF) => {\n\n        this.add(gltf.scene);\n      },\n      // called while loading is progressing\n      (xhr: ProgressEvent) => {\n        console.log(`${(xhr.loaded / xhr.total) * 100}% loaded`);\n      },\n      // called when loading has errors\n      (error) => {\n        console.log('An error  happened');\n      },\n    );\n  }\n\n\n\n\n  private layout() {\n    // this.body.scale.set(this.mugWidth, this.chairHeight, this.mugWidth);\n    // this.body.position.set(0, this.chairHeight/2, 0);\n  }\n}\n\nexport default Chair;","import GUI from 'lil-gui';\nimport * as THREE from 'three'\nimport { Vector3 } from 'three';\nimport DSEObject from './DSEObject';\n\nclass DisplayRoom extends DSEObject {\n\n  private groundWidth = 5;\n  private groundHeight = 5;\n  private wallHeight = 2;\n  private showWalls = 3;\n\n  private groundColor = 0xcccccc;\n  private wallColor = 0xffcc66;\n\n  private ground: THREE.Mesh;\n  private walls: THREE.Mesh[] = [];\n\n  constructor() {\n    super();\n\n    this.name = 'displayRoom';\n    \n    this.initGround();\n    this.initWall();\n\n    this.layout();\n  }\n\n  public setGUI(gui: GUI) {\n    const folder = gui.addFolder('DisplayRoom');\n    folder.add(this, 'groundWidth', 2, 10, 0.1).onChange((value: number) => {\n      this.groundWidth = value;\n      this.layout();\n    })\n    folder.add(this, 'groundHeight', 2, 10, 0.1).onChange((value: number) => {\n      this.groundHeight = value;\n      this.layout();\n    })\n    folder.add(this, 'wallHeight', 2, 3, 0.1).onChange((value: number) => {\n      this.wallHeight = value;\n      this.layout();\n    })\n    folder.add(this, 'showWalls', 0, 3, 1).onChange((value: number) => {\n      this.showWalls = value;\n      this.layout();\n    })\n  }\n\n  public getContainerBox() {\n    return {\n      min: new Vector3(\n        -this.groundWidth / 2,\n        0,\n        -this.groundHeight / 2\n      ),\n      max: new Vector3(\n        this.groundWidth / 2,\n        0,\n        this.groundHeight / 2\n      )\n    }\n  }\n\n  private initGround() {\n    const geometry = new THREE.PlaneGeometry(1, 1)\n    const material = new THREE.MeshLambertMaterial({ color: this.groundColor });\n    material.side = THREE.DoubleSide;\n    this.ground = new THREE.Mesh(geometry, material);\n    this.add(this.ground);\n  }\n\n  private initWall() {\n    for (let i = 0; i < this.showWalls; i++) {\n      const geometry = new THREE.PlaneGeometry(1, 1);\n      const material = new THREE.MeshLambertMaterial({\n        color: this.wallColor,\n      });\n      material.side = THREE.DoubleSide;\n      const wall = new THREE.Mesh(geometry, material);\n      this.add(wall);\n      this.walls.push(wall);\n    }\n  }\n\n  private layout() {\n    this.ground.rotation.set(Math.PI / 2, 0, 0);\n    this.ground.scale.set(this.groundWidth, this.groundHeight, 0.5);\n\n    this.walls.forEach((wall: THREE.Mesh) => {\n      wall.visible = false;\n    });\n\n    //back wall\n    if (this.showWalls > 0) {\n      this.walls[0].visible = true;\n      this.walls[0].scale.set(this.groundWidth, this.wallHeight, 0.1);\n      this.walls[0].position.set(0, this.wallHeight / 2, this.groundHeight / 2);\n    }\n\n    if (this.showWalls > 1) {\n      //right wall\n      this.walls[1].visible = true;\n      this.walls[1].scale.set(this.groundHeight, this.wallHeight, 0.1);\n      this.walls[1].rotation.set(0, Math.PI / 2, 0);\n      this.walls[1].position.set(this.groundWidth / 2, this.wallHeight / 2, 0);\n\n      //left wall\n      this.walls[2].visible = true;\n      this.walls[2].scale.set(this.groundHeight, this.wallHeight, 0.1);\n      this.walls[2].rotation.set(0, -Math.PI / 2, 0);\n      this.walls[2].position.set(-this.groundWidth / 2, this.wallHeight / 2, 0);\n    }\n\n    this.dispatchEvent({ type: 'layout-change', message: 'room changed' });\n  }\n}\n\nexport default DisplayRoom;","import GUI from 'lil-gui';\nimport { BoxGeometry, Mesh, MeshLambertMaterial, Vector3 } from 'three';\nimport { GLTF, GLTFLoader, OBJLoader } from 'three-stdlib';\nimport DSEObject from './DSEObject';\nimport * as THREE from 'three'\n\n\nclass MonitorSample extends DSEObject {\n\n  body: THREE.Group;\n\n  mugWidth: number = 0.2\n\n  constructor() {\n    super();\n\n    this.loadMonitor()\n    this.layout();\n  }\n\n  /**\n   * Get restrict min and max, will be used for object.position.clamp\n   *  \n   * @returns {min:Vector3, max: Vector3}\n   */\n  public getRestrictArea() {\n    return {\n      min: new Vector3(\n        this.restrictMin.x + this.mugWidth / 2,\n        this.restrictMin.y,\n        this.restrictMin.z + this.mugWidth / 2,\n      ),\n      max: new Vector3(\n        this.restrictMax.x - this.mugWidth / 2,\n        this.restrictMax.y,\n        this.restrictMax.z - this.mugWidth / 2,\n      )\n    }\n  }\n\n  private loadMonitor() {\n\n    const geo = new BoxGeometry(1, 1, 1);\n    const material = new MeshLambertMaterial({ color: 0xff0000, wireframe: true });\n    const mesh = new Mesh(geo, material);\n    mesh.scale.set(1.2, 0.45, 0.1);\n\n    this.add(mesh);\n\n    const url = process.env.PUBLIC_URL + '/static/models/monitor-34.gltf';\n\n    // Instantiate a loader\n    const loader = new GLTFLoader();\n    // Load a glTF resource\n    loader.load(\n      // resource URL\n      url,\n      // called when the resource is loaded\n      (gltf: GLTF) => {\n        this.body = gltf.scene;\n        console.log('this.body ', this.body);\n\n        this.add(this.body);\n      },\n      // called while loading is progressing\n      (xhr: ProgressEvent) => {\n        console.log(`${(xhr.loaded / xhr.total) * 100}% loaded`);\n      },\n      // called when loading has errors\n      (error) => {\n        console.log('An error  happened');\n      },\n    );\n  }\n\n\n\n  private layout() {\n    // this.body.scale.set(this.mugWidth, this.mugWidth, this.mugWidth)\n  }\n}\n\n\nexport default MonitorSample;","import GUI from 'lil-gui';\nimport { BoxGeometry, Mesh, MeshLambertMaterial, Vector3 } from 'three';\nimport DSEObject from './DSEObject';\n\nclass Mug extends DSEObject {\n\n  body: Mesh;\n\n  mugWidth: number = 0.2\n\n  constructor() {\n    super();\n\n    this.initMug()\n    this.layout();\n  }\n\n  /**\n   * Get restrict min and max, will be used for object.position.clamp\n   *  \n   * @returns {min:Vector3, max: Vector3}\n   */\n  public getRestrictArea() {\n    return {\n      min: new Vector3(\n        this.restrictMin.x + this.mugWidth / 2,\n        this.restrictMin.y + this.mugWidth / 2,\n        this.restrictMin.z + this.mugWidth / 2,\n      ),\n      max: new Vector3(\n        this.restrictMax.x - this.mugWidth / 2,\n        this.restrictMax.y + this.mugWidth / 2,\n        this.restrictMax.z - this.mugWidth / 2,\n      )\n    }\n  }\n\n  private initMug() {\n    const geo = new BoxGeometry(1, 1, 1);\n    const material = new MeshLambertMaterial({ color: 0xffcc99 });\n    this.body = new Mesh(geo, material);\n\n    this.add(this.body);\n  }\n\n  private layout() {\n    this.body.scale.set(this.mugWidth, this.mugWidth, this.mugWidth)\n  }\n}\n\n\nexport default Mug;","import GUI from 'lil-gui';\nimport * as THREE from 'three'\nimport { Vector3 } from 'three';\nimport DSEObject from './DSEObject';\n\nclass SimpleDesk extends DSEObject {\n\n  private desktopWidth = 2;\n  private desktopDepth = 0.6;\n  private desktopHeight = 0.05\n\n  private legWidth = 0.05;\n  private legHeight = 0.9;\n  private padding = 0.1;\n\n  private boardColor = 0xC26910;\n  private legsColor = 0x000000;\n\n  private desktop: THREE.Mesh;\n  private legs: THREE.Mesh[] = [];\n\n  constructor() {\n    super();\n\n    this.initDesktop();\n    this.initLegs();\n\n    this.layout();\n  }\n\n  public setGUI(gui: GUI) {\n    const folder = gui.addFolder('Desk');\n    folder.add(this, 'desktopWidth', 1, 3.6, 0.1).onChange((value: number) => {\n      this.desktopWidth = value;\n      this.layout();\n    })\n    folder.add(this, 'desktopDepth', 0.5, 2, 0.01).onChange((value: number) => {\n      this.desktopDepth = value;\n      this.layout();\n    })\n    folder.add(this, 'desktopHeight', 0.02, 0.1, 0.01).onChange((value: number) => {\n      this.desktopHeight = value;\n      this.layout();\n    })\n    folder.add(this, 'legHeight', 0.5, 1.6, 0.1).onChange((value: number) => {\n      this.legHeight = value;\n      this.layout();\n    })\n    folder.add(this, 'legWidth', 0.02, 0.12, 0.01).onChange((value: number) => {\n      this.legWidth = value;\n      this.layout();\n    })\n    folder.add(this, 'padding', 0.01, 0.2, 0.01).onChange((value: number) => {\n      this.padding = value;\n      this.layout();\n    })\n  }\n\n  /**\n   * Get restrict min and max, will be used for object.position.clamp\n   *  \n   * @returns {min:Vector3, max: Vector3}\n   */\n  public getRestrictArea() {\n    return {\n      min: new Vector3(\n        this.restrictMin.x + this.desktopWidth / 2,\n        0,\n        this.restrictMin.z + this.desktopDepth / 2,\n      ),\n      max: new Vector3(\n        this.restrictMax.x - this.desktopWidth / 2,\n        0,\n        this.restrictMax.z - this.desktopDepth / 2,\n      )\n    }\n  }\n\n  /**\n   * Get the surface can be used for content object\n   * The moving area\n   * \n   * @returns {min, max}\n   */\n  public getContainerBox() {\n    const topSurface = this.legHeight + this.desktopHeight;\n    return {\n      min: new Vector3(\n        this.position.x - this.desktopWidth / 2,\n        topSurface,\n        this.position.z - this.desktopDepth / 2\n      ),\n      max: new Vector3(\n        this.position.x + this.desktopWidth / 2,\n        topSurface,\n        this.position.z + this.desktopDepth / 2\n      )\n    }\n  }\n\n  /**\n   * Get configuration object can be used for saving \n   * @returns desk object data\n   */\n  public getConfiguration() {\n    return {\n\n    }\n  }\n\n  public addSub(child: THREE.Object3D) {\n    const box = new THREE.Box3().setFromObject(child);\n\n    // console.log('box', box);\n    child.position.set(0, this.legHeight + this.desktopHeight + box.max.y, 0)\n    this.add(child);\n    console.log('desk children:',this.children);\n  }\n\n  private initDesktop() {\n    const geo = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshLambertMaterial({ color: this.boardColor });\n    this.desktop = new THREE.Mesh(geo, material);\n\n    this.add(this.desktop);\n  }\n\n  private initLegs() {\n    for (let i = 0; i < 4; i++) {\n      const geo = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshLambertMaterial({ color: this.legsColor });\n      const leg = new THREE.Mesh(geo, material);\n\n      leg.rotation.set(Math.PI / 2, 0, 0)\n      this.add(leg);\n      this.legs.push(leg);\n    }\n  }\n\n  private layout() {\n    this.desktop.rotation.set(Math.PI / 2, 0, 0)\n    // this.desktop.position.set(0, this.legHeight + this.desktopHeight / 2, 0)\n\n    // resize the desk board\n    this.desktop.scale.set(this.desktopWidth, this.desktopDepth, this.desktopHeight);\n    // set position of the desk board\n    this.desktop.position.set(0, this.legHeight + this.desktopHeight / 2, 0);\n\n    // resize the legs\n    this.legs.forEach((leg: THREE.Mesh) => {\n      leg.scale.set(this.legWidth, this.legWidth, this.legHeight);\n    });\n\n    // set positions of the legs\n    this.legs[0].position.set(\n      -this.desktopWidth / 2 + this.padding + this.legWidth / 2,\n      this.legHeight / 2,\n      -this.desktopDepth / 2 + this.padding + this.legWidth / 2\n    );\n    this.legs[1].position.set(\n      this.desktopWidth / 2 - this.padding - this.legWidth / 2,\n      this.legHeight / 2,\n      -this.desktopDepth / 2 + this.padding + this.legWidth / 2\n    );\n    this.legs[2].position.set(\n      -this.desktopWidth / 2 + this.padding + this.legWidth / 2,\n      this.legHeight / 2,\n      this.desktopDepth / 2 - this.padding - this.legWidth / 2\n    );\n    this.legs[3].position.set(\n      this.desktopWidth / 2 - this.padding - this.legWidth / 2,\n      this.legHeight / 2,\n      this.desktopDepth / 2 - this.padding - this.legWidth / 2\n    );\n\n    this.dispatchEvent({ type: 'layout-change', message: 'desk changed' });\n  }\n}\n\nexport default SimpleDesk;","import GUI from \"lil-gui\";\nimport { Scene } from \"three\";\nimport { GLTF, GLTFLoader } from \"three-stdlib\";\nimport Chair from \"../models/Chair\";\nimport DisplayRoom from \"../models/DisplayRoom\";\nimport DSEObject from \"../models/DSEObject\";\nimport MonitorSample from \"../models/MonitorSample\";\nimport Mug from \"../models/Mug\";\nimport SimpleDesk from \"../models/SimpleDesk\";\n\nclass SetupObjects {\n  private scene: Scene;\n  private gui: GUI;\n\n\n  private room: DisplayRoom;\n  private desk: SimpleDesk;\n\n  private inRoomObjects: DSEObject[] = [];\n  private onTableObjects: DSEObject[] = [];\n\n  constructor(scene: Scene, gui: GUI) {\n    this.scene = scene;\n    this.gui = gui;\n\n    this.initRoom();\n    this.initInRoomObjects();\n    this.initOnDeskObjects();\n\n    // const loader = new GLTFLoader();\n\n    // loader.load(\n    //   // resource URL\n    //   'https://raw.githubusercontent.com/f1982/planet-of-images/main/img/my-room-v0.69.gltf',\n    //   // called when the resource is loaded\n    //   (gltf: GLTF) => {\n    //     // this.body = gltf.scene;\n    //     // console.log('this.body ', this.body);\n    //     // this.add(this.body);\n    //     this.scene.add(gltf.scene);\n    //   },\n    //   // called while loading is progressing\n    //   (xhr: ProgressEvent) => {\n    //     console.log(`${(xhr.loaded / xhr.total) * 100}% loaded`);\n    //   },\n    //   // called when loading has errors\n    //   (error) => {\n    //     console.log('An error  happened');\n    //   },\n    // );\n  }\n\n  private initRoom() {\n    const room = new DisplayRoom();\n    room.addEventListener('layout-change', () => {\n      this.updateInRoomObjectsRestrictArea();\n    })\n\n    room.setGUI(this.gui);\n    this.scene.add(room);\n    this.room = room;\n  }\n\n  private initInRoomObjects() {\n    const desk = new SimpleDesk();\n    desk.setGUI(this.gui);\n    desk.addEventListener('layout-change', () => {\n      this.updateOnTableObjectRestrictArea();\n    });\n    this.scene.add(desk);\n    this.inRoomObjects.push(desk);\n    this.desk = desk;\n\n    const chair = new Chair();\n    this.inRoomObjects.push(chair);\n    this.scene.add(chair);\n\n    this.updateInRoomObjectsRestrictArea();\n  }\n\n  private updateInRoomObjectsRestrictArea() {\n    const { min, max } = this.room.getContainerBox();\n    // update all the object\n    this.inRoomObjects.forEach(obj => {\n      obj.updateRestrictArea(min, max);\n    });\n  }\n\n  private initOnDeskObjects() {\n\n\n    const mug = new Mug();\n    this.desk.addSub(mug);\n    this.onTableObjects.push(mug);\n\n\n    const monitor = new MonitorSample()\n    this.desk.addSub(monitor);\n    this.onTableObjects.push(monitor);\n\n\n    // addDragAndDrop(this.camera, this.renderer.domElement, [desk]);\n    // ctrl.attachObject(desk);\n    // ctrl.attachObject(mug);\n\n    this.updateOnTableObjectRestrictArea();\n  }\n\n  private updateOnTableObjectRestrictArea() {\n    const { min, max } = this.desk.getContainerBox();\n    this.onTableObjects.forEach(obj => {\n      obj.updateRestrictArea(min, max);\n    });\n  }\n\n}\n\n\nexport default SetupObjects;","// @ts-ignore\nimport * as THREE from 'three';\nimport gsap from 'gsap';\nimport { DragControls } from 'three/examples/jsm/controls/DragControls';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n// import theme from 'utils/theme';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { vertex as basicVertex, fragment as basicFragment } from '../shaders/index';\nimport { getCamera, getGirds, getGUIPanel, getLights, getOrthographicCamera, getRenderer, getScene, getStats } from './SceneElements';\nimport GlobalController, { addControl, addDragAndDrop } from './Controllers';\nimport SimpleDesk from '../models/SimpleDesk';\nimport Stats from 'stats.js';\nimport { getCubeGroup, loadScene } from '../models';\nimport GUI from 'lil-gui';\nimport DisplayRoom from '../models/DisplayRoom';\nimport Mug from '../models/Mug';\nimport DSEObject from '../models/DSEObject';\nimport SetupObjects from './SetupObjects';\n\n// use this tool to help you to locate the position of the light and cameras\n// https://threejs.org/editor/\ninterface IOptions {\n  mountPoint: HTMLDivElement;\n  width: number;\n  height: number;\n}\n\nclass ThreeCanvas {\n\n  public scene: THREE.Scene;\n  private renderer: THREE.WebGLRenderer;\n\n  private composer: EffectComposer;\n  private clock: THREE.Clock;\n\n  private camera: THREE.Camera;\n  private perspectiveCamera: THREE.PerspectiveCamera;\n  private orthographicCamera: THREE.OrthographicCamera;\n\n  // @ts-ignore\n  private stats: Stats;\n\n  private gui: GUI;\n\n  private setupObjects: SetupObjects;\n\n  public movableObjects: DSEObject[] = [];\n\n  constructor(options: IOptions) {\n    this.initScene(options);\n    this.initTools();\n    this.initElements();\n    this.initControl();\n  }\n\n  public dispose() {\n    console.log('dispose renderer!')\n    this.renderer.dispose();\n    this.gui.destroy();\n    this.stats.dom.remove();\n    // document.body.append()\n\n\n    this.scene.traverse((object:THREE.Object3D) => {\n      console.log('object', object);\n      // if (!object.isMesh) return\n\n      // console.log('dispose geometry!')\n      // object.geometry.dispose()\n\n      // if (object.material.isMaterial) {\n      //   cleanMaterial(object.material)\n      // } else {\n      //   // an array of materials\n      //   for (const material of object.material) cleanMaterial(material)\n      // }\n    })\n  }\n\n  public switchToSTLScene() {\n    // remove controller from scene\n    // controller.removeTransformController()\n  }\n\n  public resetNormalScene() {\n\n  }\n\n  private initScene(options: IOptions) {\n    const { mountPoint, width, height } = options;\n    // basics\n    this.clock = new THREE.Clock();\n    // scene\n    this.scene = getScene();\n\n    this.perspectiveCamera = getCamera(width, height);\n    this.orthographicCamera = getOrthographicCamera(width, height);\n\n    this.camera = this.perspectiveCamera;\n\n    const lights = getLights(this.scene);\n\n    this.renderer = getRenderer(width, height);\n\n    // post processing support\n    const renderPass = new RenderPass(this.scene, this.camera);\n    renderPass.clear = false;\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(renderPass);\n\n    // mount to DOM\n    mountPoint.appendChild(this.renderer.domElement);\n    // mountPoint.appendChild(VRButton.createButton(this.renderer));\n  }\n\n  private initTools() {\n    this.scene.add(getGirds());\n    const axesHelper = new THREE.AxesHelper(5);\n    this.scene.add(axesHelper);\n\n    this.gui = getGUIPanel();\n\n    this.stats = getStats();\n    document.body.append(this.stats.dom)\n  }\n\n  initElements() {\n    this.setupObjects = new SetupObjects(this.scene, this.gui);\n\n  }\n\n  initControl() {\n    // addControl(this.camera, this.renderer.domElement);\n    const ctrl = new GlobalController(this.scene, this.camera, this.renderer);\n  }\n\n  resizeRendererToDisplaySize() {\n    const canvas = this.renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    const needResize = canvas.width !== width || canvas.height !== height;\n\n    if (needResize) {\n      this.renderer.setSize(width, height, false);\n      this.renderer.setPixelRatio(\n        Math.min(window.devicePixelRatio, 2),\n      ); // use 2x pixel ratio at max\n    }\n\n    return needResize;\n  }\n\n  public setAnimationLoop(callback: XRFrameRequestCallback) {\n    this.renderer.setAnimationLoop(callback);\n  }\n\n  render() {\n    this.stats.begin();\n\n    // check if we need to resize the canvas and re-setup the camera\n    if (this.resizeRendererToDisplaySize()) {\n      const canvas = this.renderer.domElement;\n\n      if (this.camera === this.perspectiveCamera) {\n        this.perspectiveCamera.aspect = canvas.clientWidth / canvas.clientHeight;\n        this.perspectiveCamera.updateProjectionMatrix();\n      } else {\n        this.orthographicCamera.updateProjectionMatrix();\n      }\n      this.composer.render();\n      this.stats.end();\n    }\n  }\n}\n\nexport default ThreeCanvas;\n","import GUI from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as THREE from 'three';\n\nexport const getScene = () => {\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color('#cccccc');\n  return scene;\n}\n\nexport const getCamera = (width: number, height: number) => {\n  const camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);\n  // const camera = new THREE.OrthographicCamera(75, width / height, 0.1, 1000);\n  camera.position.set(3, 2, -3);\n  camera.rotation.set(0, 0, 0)\n  return camera;\n}\nexport const getOrthographicCamera = (width: number, height: number) => {\n  // const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n  const camera = new THREE.OrthographicCamera(width / - 2, width / 2, height / 2, height / - 2, 0.1, 1000);\n  // camera.far= 10\n  // camera.position.set(30, 0, 0);\n  // camera.rotation.set(0, 0, 0)\n  return camera;\n}\n\nexport const getLights = (scene: THREE.Scene) => {\n  const ambientLight = new THREE.AmbientLight(0xffffff, 0.66);\n  ambientLight.position.set(0, 3, 0);\n  scene.add(ambientLight);\n\n  const directionLight = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionLight.position.set(13.5, 15, -12.5);\n  scene.add(directionLight);\n\n  // const pointLight = new THREE.PointLight(0xffffff, 1);\n  // scene.add(pointLight);\n\n  // const directionLightHelper = new THREE.DirectionalLightHelper(directionLight, 10, 0xff0000);\n  // scene.add(directionLightHelper);\n}\n\nexport const getRenderer = (width: number, height: number) => {\n  const renderer = new THREE.WebGLRenderer({\n    alpha: true,\n    antialias: true,\n  });\n\n  renderer.setSize(width, height);\n  // VR support\n  // renderer.xr.enabled = true;\n  return renderer;\n}\n\n\nexport const getGUIPanel = () => {\n  const panel = new GUI({ width: 310 });\n\n  // const myObject = {\n  //   myBoolean: true,\n  //   myFunction: function () { },\n  //   myString: 'lil-gui',\n  //   myNumber: 1\n  // };\n\n  // panel.add(myObject, 'myNumber')\n  //   .name('Custom Name')\n  //   .onChange((value: number) => {\n  //     console.log(value);\n  //   });\n  // const folder1 = panel.addFolder('Base Actions');\n  // const folder2 = panel.addFolder('Additive Action Weights');\n  // const folder3 = panel.addFolder('General Speed');\n\n  return panel;\n}\n\nexport const getGirds = () => {\n  const grid = new THREE.GridHelper(10, 20, 0xffffff, 0xffffff);\n  // grid.material.opacity = 0.5;\n  // grid.material.depthWrite = false;\n  // grid.material.transparent = true;\n  return grid;\n}\n\nexport const addGroundAndWall = () => {\n  \n}\n\nexport const getStats = () => {\n  const stats = new Stats();\n  stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n  return stats;\n}\nexport default {}","import React, { useEffect, useRef, useState } from 'react';\nimport { saveSTL } from '../../utils/threeUtils';\nimport ThreeCanvas from '../../editor/EditScene';\nimport './ThreeComponent.scss';\n\n\nconst ThreeComp: React.FC = () => {\n  const [initialized, setInitialized] = useState<boolean>(false);\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const threeSceneRef = useRef<ThreeCanvas | null>(null);\n\n  const startDrawing = (threeCanvas: ThreeCanvas) => {\n    threeCanvas.setAnimationLoop(\n      () => {\n        threeCanvas.render();\n      }\n    );\n  };\n\n  useEffect(() => {\n    if (!initialized) {\n      if (canvasRef.current) {\n        const { clientWidth, clientHeight } = canvasRef.current;\n        const threeScene = new ThreeCanvas({\n          mountPoint: canvasRef.current,\n          width: clientWidth,\n          height: clientHeight,\n        });\n        threeSceneRef.current = threeScene;\n        startDrawing(threeScene);\n        setInitialized(true);\n      }\n    }\n    return ()=>{\n      if (threeSceneRef.current){\n        threeSceneRef.current.dispose();\n      }\n      if (canvasRef.current){\n        const child = canvasRef.current.firstChild;\n        canvasRef.current.removeChild(child!);\n      }\n    }\n  }, []);\n\n  return (\n    <div className=\"container\" data-test={initialized}>\n      <div className=\"visualizationMount\" ref={canvasRef} />\n      <div>\n        <button onClick={() => {\n          if (threeSceneRef.current && threeSceneRef.current.scene) {\n            saveSTL(threeSceneRef.current.scene, 'test-stl-file')\n          }\n        }}>Save STL</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ThreeComp;\n","import ThreeComponent from '../component/ThreeContainer/ThreeComponent';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport './Editor.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThreeComponent />\n      <div className='tool-container'>\n        <div className=\"left-bar\"></div>\n        <div className=\"right\">\n          <Link to=\"/\">Home</Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {Link} from 'react-router-dom'\nimport React from 'react'\n\nfunction Intro() {\n  return (\n    <div className=\"page\">\n      <div className=\"intro\">This is Setup Editor</div>\n      <div>\n        <Link to=\"/editor\">Editor</Link>\n      </div>\n      <div>\n        <Link to=\"/about\">About</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Intro;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client';\nimport {\n  BrowserRouter, Route, Routes\n} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\nimport About from './pages/About';\nimport Editor from './pages/Editor';\nimport Home from './pages/Home';\n\nimport './global.scss';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/editor\" element={<Editor />} />\n      <Route path=\"/about\" element={<About />} />\n    </Routes>\n  </BrowserRouter>\n\n  // <React.StrictMode>\n  // <App />\n  // </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}